;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Sun Mar  3 20:33:35 2024
;; Desktop file format version 208
;; Emacs version 30.0.50

;; Global section:
(setq desktop-saved-frameset [frameset 1 (26084 28191 407725 0) (desktop . "208") "charles@mbp2020" nil nil ((((minibuffer . t) (fontsize . 0) (font . "-*-Lilex-regular-normal-normal-*-14-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 0) (child-frame-border-width) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#000000") (background-color . "#ffffff") (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (undecorated) (undecorated-round) (ns-appearance) (ns-transparent-titlebar) (z-group) (no-focus-on-map) (no-accept-focus) (menu-bar-lines . 1) (tab-bar-lines . 0) (tool-bar-lines . 0) (title) (inhibit-double-buffering) (icon-type) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 15) (scroll-bar-height . 15) (alpha) (alpha-background) (fullscreen) (scroll-bar-foreground . "#595959") (scroll-bar-background . "#f0f0f0") (display-type . color) (background-mode . light) (cursor-color . "#000000") (font-parameter) (environment) (last-focus-update . t) (frameset--id . "6B3B-C5F0-0520-C6A0") (frameset--mini t . t) (modeline . t) (unsplittable) (icon-name) (visibility . t) (display . "mbp2020") (explicit-name) (tool-bar-position . top) (frameset--text-pixel-width . 920) (frameset--text-pixel-height . 828) (height . 46) (width . 115) (left . 37) (top . 25)) ((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 72) (min-pixel-width . 80) (min-pixel-height-ignore . 39) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 18) (min-pixel-width-safe . 16)) leaf (pixel-width . 936) (pixel-height . 810) (total-width . 117) (total-height . 45) (normal-height . 1.0) (normal-width . 1.0) (buffer "init-fonts.el" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 662) (start . 81)) (prev-buffers ("init-fonts.el" 81 662) ("base.yml" 873 1532) ("config.yaml" 1 507) ("*scratch*" 1 1))))])
(setq comint-input-ring nil)
(setq compile-history nil)
(setq desktop-missing-file-warning nil)
(setq dired-regexp-history nil)
(setq extended-command-history '("package-install" "package-delete" "package-upgrade-all" "package-install" "package-list-packages" "package-install" "set-bilingual-font" "package-install" "set-bilingual-font" "package-install" "package-upgrade-all" "package-delete" "package-upgrade-all" "package-install" "crux-kill-other-buffers" "lsp-mode" "set-bilingual-font" "package-install" "package-delete" "emacs-lisp-mode" "package-delete" "geiser-show-logs" "geiser" "geiser-chez" "fringe-mode" "geiser-racket" "restart-emacs" "c-ts-mode-menu" "c-ts-mode-set-global-style" "restart-emacs"))
(setq face-name-history '("Info-quoted" "org-default" "variable-pitch" #("org-defa" 0 8 (ivy-index 0)) "org-default" #("info-h" 0 6 (ivy-index 1)) "info-header-xref" "info-menu-header" #("cons" 0 4 (ivy-index 0)) "font-lock-constant-face" "hl-line" #("default" 0 7 (ivy-index 129)) "internal-border"))
(setq file-name-history '("~/.emacs.d/lisp/init-elpa.el" "~/.emacs.d/custom.el" "~/.config/lsd/config.yaml" "~/Library/Preferences/espanso/match/base.yml" "~/.emacs.d/lisp/init-fonts.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/.emacs.d/lisp/init-yaml.el" "~/Library/Preferences/espanso/match/base.yml" "~/.config/lsd/config.yaml" "~/.emacs.d/lisp/init-yaml.el" "~/Library/Preferences/espanso/match/base.yml" "~/.config/lsd/config.yaml" "~/Library/Preferences/espanso/match/base.yml" "~/.emacs.d/custom.el" "~/.emacs.d/lisp/init-yaml.el" "~/.config/lsd/config.yaml" "~/Developer/lua-dev/bignumber.lua" "~/.config/lsd/themes/chl.yaml" "~/.config/lsd/colors.yaml" "~/.config/lsd/config.yaml" "~/.config/starship.toml" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/lisp/init-editing-utils.el" "~/.emacs.d/custom.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/lisp/init-lua.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-fonts.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/lisp/init-lua.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-themes.el" "~/.emacs.d/custom.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/lisp/init-lua.el" "~/.emacs.d/init.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/lisp/init-lua.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/elpa-30.0/lua-mode-20221218.605/lua-mode.el" "~/.emacs.d/lisp/init-lua.el" "~/Developer/lua-dev/hello.lua" "~/.emacs.d/lisp/init-fonts.el" "~/.hammerspoon/Spoons/AClock.spoon/init.lua" "~/.hammerspoon/Spoons/AClock.spoon/docs.json" "~/.emacs.d/site-lisp/systempath/TAGS" "~/Developer/emacs-src/TAGS" "~/.emacs.d/lisp/init-fonts.el" "~/.hammerspoon/init.lua" "~/.emacs.d/elpa-30.0/fullframe-20210226.1057/fullframe.el" "~/.emacs.d/lisp/init-git.el" "~/.emacs.d/lisp/init-flycheck.el" "~/.emacs.d/lisp/init-rust.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/Library/Preferences/espanso/match/base.yml" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/.emacs.d/lisp/init-yaml.el" "~/Library/Preferences/espanso/match/base.yml" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/.emacs.d/lisp/init-yaml.el" "~/.emacs.d/lisp/init-editing-utils.el" "~/.emacs.d/lisp/init-rust.el" "~/.emacs.d/lisp/init-asymptote.el" "~/.emacs.d/lisp/init-flycheck.el" "~/.emacs.d/lisp/init-yaml.el" "~/Library/Preferences/espanso/match/base.yml" "~/.config/yamllint/config" "~/Library/Preferences/espanso/match/packages/all-emojis/package.yml" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/Developer/lisp-dev/factorial.rkt" "~/Library/Preferences/espanso/match/base.yml" "~/Library/Preferences/espanso/config/default.yml" "~/Library/Preferences/espanso/config/emacs.yml" "~/Library/Preferences/espanso/config/default.yml" "~/Library/Preferences/espanso/match/base.yml" "~/Library/Preferences/espanso/config/default.yml" "~/Library/Preferences/espanso/match/base.yml" "~/.config/yamllint/config" "~/Library/Preferences/espanso/match/base.yml" "~/Library/Preferences/espanso/config/default.yml" "~/Developer/lisp-dev/factorial.rkt" "~/.emacs.d/elpa-30.0/geiser-racket-20210421.125/geiser-racket.el" "~/.emacs.d/lisp/init-scheme.el" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/custom.el" "~/.emacs.d/lisp/init-scheme.el" "~/Developer/emacs-src/src/treesit.c" "~/Developer/emacs-src/TAGS" "~/Developer/emacs-src/src/treesit.c" "~/.emacs.d/.bookmarks.el" "~/.emacs.d/lisp/init-local.el"))
(setq grep-find-history nil)
(setq grep-history nil)
(setq ivy-history '(#("ivy-20230410.1815" 0 17 (ivy-index 0)) #("swiper-20230410.1815" 0 20 (ivy-index 0)) #("ivy-rich-20230425.1422" 0 22 (ivy-index 0)) #("ivy-xref-20211008.1103" 0 22 (ivy-index 0)) #("company-20230703.2021" 0 21 (ivy-index 0)) #("counsel-20230619.1623" 0 21 (ivy-index 1)) #("company-c-headers-20190825.1631" 0 31 (ivy-index 0)) #("company-posframe-20230104.1229" 0 30 (ivy-index 0)) #("init-company.el" 0 15 (ivy-index 1)) #("init-themes.el" 0 14 (ivy-index 1)) #("*scratch*" 0 9 (ivy-index 1)) #("theme" 0 5 (ivy-index 0)) "/Users/charles/.emacs.d/lisp/init-themes.el" #("com" 0 3 (ivy-index 2)) "/Users/charles/.emacs.d/lisp/init-company.el" #("org" 0 3 (ivy-index 0)) "fonts-collection.org" #("timu" 0 4 (ivy-index 0)) "timu-caribbean-theme.el" "timu-caribbean" #("fonts-collection.org" 0 20 (ivy-index 2)) "/Users/charles/Documents/org/fonts-collection.org" "timu-caribbean" "/Users/charles/.emacs.d/elpa-30.0/timu-caribbean-theme-20221226.1556/timu-caribbean-theme.el" "/Users/charles/.emacs.d/lisp/init-themes.el" "timu-caribbean" #("hard" 0 4 (ivy-index 0)) "hardhacker" #("misterioso" 0 10 (ivy-index 17)) "timu-caribbean" #("modus-operandi" 0 14 (ivy-index 1)) #("timu-caribbean" 0 14 (ivy-index 9)) "hardhacker" #("ver" 0 3 (ivy-index 0)) "init-vertico.el" #("init-theme" 0 10 (ivy-index 0)) "~/.emacs.d/lisp/init-themes.el" #("init-gui" 0 8 (ivy-index 0)) "~/.emacs.d/lisp/init-gui-frames.el" #("init-org" 0 8 (ivy-index 1)) "~/.emacs.d/lisp/init-org.el" #("init-local" 0 10 (ivy-index 0)) "~/.emacs.d/lisp/init-local.el" #("init-windows.el" 0 15 (ivy-index 1)) #("helpful.el" 0 10 (ivy-index 1)) #("init-win" 0 8 (ivy-index 0)) "~/.emacs.d/lisp/init-windows.el" #("helpful" 0 7 (ivy-index 5)) "~/.emacs.d/elpa-30.0/helpful-20230504.1546/helpful.el" #("macos" 0 5 (ivy-index 0)) "~/.emacs.d/lisp/init-macos.el" #("init-gui-frames.el" 0 18 (ivy-index 1)) #("init-compa" 0 10 (ivy-index 0)) "~/.emacs.d/lisp/init-company.el" "~/.emacs.d/lisp/init-macos.el" #("mes" 0 3 (ivy-index 0)) "*Messages*" #("hardhacker" 0 10 (ivy-index 8)) "~/Documents/org/fonts-collection.org" #("init-" 0 5 (ivy-index 21)) "~/.emacs.d/lisp/init-gui-frames.el" "~/.emacs.d/lisp/init-windows.el" #("fringe-current-line" 0 19 (ivy-index 4)) #("lisp" 0 4 (ivy-index 6)) "~/.emacs.d/lisp/init-lisp.el" #("ivy" 0 3 (ivy-index 0)) "init-ivy.el" #("init-vertico.el" 0 15 (ivy-index 1)) #("init-projectile.el" 0 18 (ivy-index 4)) #("init-asymptote.el" 0 17 (ivy-index 1)) "~/.emacs.d/lisp/init-macos.el" #("init-as" 0 7 (ivy-index 0)) "~/.emacs.d/lisp/init-asymptote.el" #("info" 0 4 (ivy-index 0)) "*info*" #("init-ivy.el" 0 11 (ivy-index 1)) #("init" 0 4 (ivy-index 1)) "init-elpa.el" "*Messages*" "*info*" #("init-elpa.el" 0 12 (ivy-index 1)) #("*Async-native-compile-log*" 0 26 (ivy-index 4)) #("init-el" 0 7 (ivy-index 0)) "~/.emacs.d/lisp/init-elpa.el" #("vl" 0 2 (ivy-index 0)) "vlf.el" #("init.el" 0 7 (ivy-index 3)) #("init-editing-utils.el" 0 21 (ivy-index 2)) #("*Messages*" 0 10 (ivy-index 2)) #("init-edi" 0 8 (ivy-index 0)) "*info*" #("scratch-message-20220209.2207" 0 29 (ivy-index 0)) #("init-lisp" 0 9 (ivy-index 0)) "~/.emacs.d/lisp/init-lisp.el" #("scratch-message" 0 15 (ivy-index 4)) #("uti" 0 3 (ivy-index 1)) "~/.emacs.d/lisp/init-utils.el" #("init-com" 0 8 (ivy-index 0)) "~/.emacs.d/lisp/init-company.el" #("scratch-20220319.1705" 0 21 (ivy-index 1))))
(setq magit-revision-history nil)
(setq minibuffer-history '("compat-29.1.4.2" "Hooks" "Configuring Packages" "use-package" "Emacs" "flycheck-yamllint-20170326.1309" "Configuring Packages" "use-package" "eval-after-load" "racket" "minimal" "half-width" "minimal" "no-fringes" "geiser-gambit-binary" "XIANGQI RED GENERAL" "ALEF SYMBOL" "FRACTION ONE HALF" "PARTIAL DIFFERENTIAL" "MATHEMATICAL BOLD SMALL THETA" "GREEK THETA SYMBOL" "GREEK CAPITAL LETTER THETA" "-I." "defgroup" "Projects" "Emacs" "cal-china-x" "whitespace-cleanup-mode" "whitespace-cleanup" "defsubst" "native-comp-async-report-warnings-errors" "-I." "read-answer-short" "visual-line-mode" "y-or-n-p" "y-or-n-p-with-timeout" "use-short-answers" "c" "kill-buffer-delete-auto-save-files" "defalias" "native-compile-async" "Klee One" "https://github.com/fontworks-fonts/Klee" "芫荽" "https://github.com/ButTaiwan/iansui" "Images" "霞鹜文楷" "https://github.com/lxgw/LxgwWenKai" "霞鹜文楷屏幕阅读版" "https://github.com/lxgw/LxgwWenKai-Screen"))
(setq org-clock-history nil)
(setq org-refile-history nil)
(setq org-tags-history '(#("wanda" 0 5 (ivy-index 2)) "friend" "macos"))
(setq query-replace-history '("𐅷" "‡" "‡" "double" "MODULE_NAME" "module_name" "M-p" "C-c p" "my/required-packages" "sanityinc/required-packages" "my/required-packages" "cmd-file-exe" "cmd-or-file-or-exe" "keymap-global-set" "global-set-key" "+" "-" "Iosevka Comfy" "Anka/Coder Condensed" "\"Ysabeau Infant\"" "org-font" "org-font" "\"Rubik\"" "height" "size" "\"Rubik\"" "org-font" "org-font" "\"Rubik\"" "cl-decf" "decf" "cl-incf" "incf" "latin-font-size" "latin-size" "cjk-size" "size-cjk" "latin-size" "size-latin" "\" \"" " " "quote" "current" "MathConstants.pi" "\317\200" "theta" "\316\270" "coroutine_result" "function_result" "cmd" "command" "maybe-require" "require" "env_var" "var_list" "shell_invoke" "shell_command" "Value" "emacs::Value" "Result"))
(setq read-expression-history '("(default-value temp-buffer-resize-mode)"))
(setq regexp-history nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . #("* Fonts Collection\n** Check font result\n#+begin_src emacs-lisp\n  (view-hello-file)\n#+end_src\n** CJK Family\n*** Klee One related\n1. Klee One\n   https://github.com/fontworks-fonts/Klee\n2. 芫荽\n   https://github.com/ButTaiwan/iansui\n3. 霞鹜文楷\n   https://github.com/lxgw/LxgwWenKai\n   https://github.com/lxgw/LxgwWenKai-Screen\n** Latin, Greek, Cyrillic\n*** [#C] Ysabeau\nhttps://github.com/CatharsisFonts/Ysabeau\n** [#A] Mono\n\n** Other Languages\n*** Maldivian\nhttps://thaana.com/\n** Northern Thai\nhttps://fonts.google.com/noto/fonts?noto.script=Lana\nhttps://software.sil.org/payaplanna/\n中文字体\nひらがな、カタカナ" 0 1 (display #("◉" 0 1 (face org-modern-symbol)) face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 18 (face org-level-1 fontified t) 18 19 (fontified t) 19 20 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 20 21 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 21 22 (face org-level-2 fontified t) 22 39 (face org-level-2 fontified t) 39 40 (fontified t) 40 48 (invisible org-modern line-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 48 51 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) face (org-block-begin-line org-modern-block-name) font-lock-multiline t font-lock-fontified t fontified t) 51 62 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-begin org-block-begin-line))) face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 62 63 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 63 65 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 65 66 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 66 81 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 81 82 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 82 83 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 83 89 (invisible org-modern line-prefix #(" " 0 1 (display (left-fringe org-modern--block-end org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-end org-block-begin-line))) face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t) 89 92 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-end org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-end org-block-begin-line))) face (org-block-end-line org-modern-block-name) font-lock-multiline t font-lock-fontified t fontified t) 92 93 (face org-block-end-line fontified t) 93 94 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 94 95 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 95 96 (face org-level-2 fontified t) 96 106 (face org-level-2 fontified t) 106 107 (fontified t) 107 109 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 109 110 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 110 111 (face org-level-3 fontified t) 111 127 (face org-level-3 fontified t) 127 143 (fontified t) 143 181 (font-lock-multiline t htmlize-link (:uri "https://github.com/fontworks-fonts/Klee") help-echo "LINK: https://github.com/fontworks-fonts/Klee" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 181 182 (font-lock-multiline t htmlize-link (:uri "https://github.com/fontworks-fonts/Klee") help-echo "LINK: https://github.com/fontworks-fonts/Klee" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 182 192 (fontified t) 192 226 (font-lock-multiline t htmlize-link (:uri "https://github.com/ButTaiwan/iansui") help-echo "LINK: https://github.com/ButTaiwan/iansui" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 226 227 (font-lock-multiline t htmlize-link (:uri "https://github.com/ButTaiwan/iansui") help-echo "LINK: https://github.com/ButTaiwan/iansui" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 227 239 (fontified t) 239 272 (font-lock-multiline t htmlize-link (:uri "https://github.com/lxgw/LxgwWenKai") help-echo "LINK: https://github.com/lxgw/LxgwWenKai" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 272 273 (font-lock-multiline t htmlize-link (:uri "https://github.com/lxgw/LxgwWenKai") help-echo "LINK: https://github.com/lxgw/LxgwWenKai" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 273 277 (fontified t) 277 317 (font-lock-multiline t htmlize-link (:uri "https://github.com/lxgw/LxgwWenKai-Screen") help-echo "LINK: https://github.com/lxgw/LxgwWenKai-Screen" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 317 318 (font-lock-multiline t htmlize-link (:uri "https://github.com/lxgw/LxgwWenKai-Screen") help-echo "LINK: https://github.com/lxgw/LxgwWenKai-Screen" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 318 319 (fontified t) 319 320 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 320 321 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 321 322 (face org-level-2 fontified t) 322 344 (face org-level-2 fontified t) 344 345 (fontified t) 345 347 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 347 348 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 348 349 (face org-level-3 fontified t) 349 350 (display " " font-lock-fontified t face org-modern-priority fontified t) 350 352 (font-lock-fontified t face org-modern-priority fontified t) 352 353 (display " " font-lock-fontified t face org-modern-priority fontified t) 353 361 (face org-level-3 fontified t) 361 362 (fontified t) 362 402 (font-lock-multiline t htmlize-link (:uri "https://github.com/CatharsisFonts/Ysabeau") help-echo "LINK: https://github.com/CatharsisFonts/Ysabeau" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 402 403 (font-lock-multiline t htmlize-link (:uri "https://github.com/CatharsisFonts/Ysabeau") help-echo "LINK: https://github.com/CatharsisFonts/Ysabeau" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 403 404 (fontified t) 404 405 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 405 406 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 406 407 (face org-level-2 fontified t) 407 408 (display " " font-lock-fontified t face org-modern-priority fontified t) 408 410 (font-lock-fontified t face org-modern-priority fontified t) 410 411 (display " " font-lock-fontified t face org-modern-priority fontified t) 411 416 (face org-level-2 fontified t) 416 418 (fontified t) 418 419 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 419 420 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 420 421 (face org-level-2 fontified t) 421 436 (face org-level-2 fontified t) 436 437 (fontified t) 437 439 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 439 440 (display #("◈" 0 1 (face org-modern-symbol)) face org-level-3 fontified t) 440 441 (face org-level-3 fontified t) 441 450 (face org-level-3 fontified t) 450 451 (fontified t) 451 469 (font-lock-multiline t htmlize-link (:uri "https://thaana.com/") help-echo "LINK: https://thaana.com/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 469 470 (font-lock-multiline t htmlize-link (:uri "https://thaana.com/") help-echo "LINK: https://thaana.com/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 470 471 (fontified t) 471 472 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 472 473 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 473 474 (face org-level-2 fontified t) 474 487 (face org-level-2 fontified t) 487 488 (fontified t) 488 539 (font-lock-multiline t htmlize-link (:uri "https://fonts.google.com/noto/fonts?noto.script=Lana") help-echo "LINK: https://fonts.google.com/noto/fonts?noto.script=Lana" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 539 540 (font-lock-multiline t htmlize-link (:uri "https://fonts.google.com/noto/fonts?noto.script=Lana") help-echo "LINK: https://fonts.google.com/noto/fonts?noto.script=Lana" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 540 541 (fontified t) 541 576 (font-lock-multiline t htmlize-link (:uri "https://software.sil.org/payaplanna/") help-echo "LINK: https://software.sil.org/payaplanna/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t) 576 577 (font-lock-multiline t htmlize-link (:uri "https://software.sil.org/payaplanna/") help-echo "LINK: https://software.sil.org/payaplanna/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 577 578 (fontified t) 578 583 (fontified t) 583 592 (fontified t)))))
(setq search-ring '(#("compat" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("page" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("3" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("yml" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("treesit" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("rtlib" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("debug" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("gambit" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #(":" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("funcall" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("emacs_rt" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("runtime" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("EMACS_ATTRIBUTE_NONNULL" 0 23 (isearch-case-fold-search nil isearch-regexp-function nil)) #("NOEXCEPT" 0 8 (isearch-case-fold-search nil isearch-regexp-function nil)) #("other-holidays" 0 14 (isearch-case-fold-search t isearch-regexp-function nil)) #("whitespace" 0 10 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq shell-command-history '("python -m jiebaa -V" "python -m jieba" "python -m pip install jieba" "python -m jieba" "adainfo stake" "adainfo"))
(setq tags-file-name "/Users/charles/.emacs.d/site-lisp/systempath/TAGS")
(setq tags-table-list '("/Users/charles/.emacs.d/site-lisp/systempath/TAGS"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/Users/charles/.emacs.d/lisp/init-fonts.el"
  "init-fonts.el"
  'emacs-lisp-mode
  '(dash-fontify-mode anzu-mode flycheck-color-mode-line-mode flycheck-mode hl-line-mode yas-minor-mode goto-address-prog-mode symbol-overlay-mode rainbow-delimiters-mode highlight-quoted-mode eldoc-mode aggressive-indent-mode elisp-slime-nav-mode display-line-numbers-mode prettify-symbols-mode page-break-lines-mode whole-line-or-region-local-mode whitespace-cleanup-mode auto-compile-mode ligature-mode corfu-mode font-lock-mode)
  662
  '(1255 nil)
  nil
  nil
  '((show-trailing-whitespace . t) (buffer-display-time 26084 28189 201122 0) (buffer-file-coding-system . utf-8-unix) (overwrite-mode))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/Users/charles/Library/Preferences/espanso/match/base.yml"
  "base.yml"
  'yaml-ts-mode
  '(anzu-mode flycheck-color-mode-line-mode flycheck-mode whole-line-or-region-local-mode whitespace-cleanup-mode ligature-mode corfu-mode font-lock-mode)
  1532
  '(619 nil)
  nil
  nil
  '((show-trailing-whitespace . t) (indent-tabs-mode) (buffer-display-time 26084 27683 980623 582000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (455 1579 1532))))

(desktop-create-buffer 208
  "/Users/charles/.config/lsd/config.yaml"
  "config.yaml"
  'yaml-ts-mode
  '(anzu-mode flycheck-color-mode-line-mode flycheck-mode whole-line-or-region-local-mode whitespace-cleanup-mode ligature-mode corfu-mode font-lock-mode)
  507
  '(nil nil)
  nil
  nil
  '((show-trailing-whitespace . t) (indent-tabs-mode) (buffer-display-time 26084 27739 929666 0) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring nil)))

